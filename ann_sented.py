# -*- coding: utf-8 -*-
"""Ann sented.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D_oxl6ehoQL7tUniN7wsHIQt5J6KtlQ_
"""

import numpy as np
import nnfs #for 
#we are increasing batches by increasing input lists
from nnfs.datasets import spiral_data

nnfs.init() # we use this to set the default data type

X=[[1,2,3,2.5],
        [2.0,5.0,-1.0,2.0],
        [-1.5,2.7,3.3,-0.8]]
X,y=spirsl_data(100,3) #100 feature sets of three classes

# weights = [[0.2,0.8,-0.5,1.0],
#             [0.5,-0.91,0.26,-0.5],
#            [-0.26,-0.27,0.17,0.87]]

# bias=[2,3,0.5]

# #we will add one more layer
# weights2=[[0.1,-0.14,0.5],
#           [-0.5,0.12,-0.33],
#           [-0.44,0.73,-0.13]]

# bias2=[-1,2,0.5]


# layer1_output=np.dot(inputs,np.array(weights).T)+bias  # we are using transpose of weights matrix because of shape error. 
# layer2_output=np.dot(layer1_output,np.array(weights2).T)+bias2  # we just added another layer
# print(layer2_output)

 
# we need to know two things. => size of the input layer and number of neurons
class Layer_Dense:
  def __init__(self,n_inputs,n_neurons):
    self.weights=0.10*np.random.randn(n_inputs,n_neurons)       #we need to pass the shape that we wanna pass
    self.biases=np.zeros((1,n_neurons))
  def forward(self,inputs):
    self.output=np.dot(inputs,self.weights) + self.biases

class Activation_ReLu:
  def forward(self,inputs): #forward function for the activation function
    self.output=np.maximum(0,inputs)

layer1=Layer_Dense(4,5) #4 is the number of inputs and 5 is the number of neurons
layer2=Layer_Dense(5,2)

layer1.forward(X)
layer2.forward(layer1.output)
print(layer2.output)






# weights = [[0.2,0.8,-0.5,1.0],
#            [0.5,-0.91,0.26,-0.5],
#            [-0.26,-0.27,0.17,0.87]]

# biases = [2, 3, 0.5]

# layer_outputs=[]

# for neuron_weights,neuron_bias in zip(weights,biases):
#   neuron_output=0
#   for n_input,weight in zip(inputs,neuron_weights):
#     neuron_output += n_input*weight 
#   neuron_output+=neuron_bias

#   layer_outputs.append(neuron_output)

# print(layer_outputs)

